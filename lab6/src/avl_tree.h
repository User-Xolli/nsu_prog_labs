/**
 * \file
 * \brief Заголовочный файл с описанием структуры дерева и функций, необходимых для работы с ним
 */

#ifndef LAB6_AVL_TREE_H
#define LAB6_AVL_TREE_H

/**
 * \brief АВЛ-дерево - сбалансированное по высоте двоичное дерево поиска
 *
 * Для каждой его вершины высота её двух поддеревьев различается не более чем на 1
 */
struct avl_tree
{
    int data; ///< Значение которое храниться в корне дерева
    struct avl_tree *left; ///< указатель на левое поддерево
    struct avl_tree *right; ///< указатель на правое поддерево
    int height; ///< высота данного дерева
};

/**
 * \brief Вставка значения в дерево
 *
 * \param root корень дерева, в которое мы хоти вставить новое значение
 * \param value Значение, которое мы хотим вставить в дерево
 * \return Вершина на дерево с добавленным значением
 */
struct avl_tree *insert(struct avl_tree *root, int value);

/**
 * \brief Инициализация дерева
 *
 * Инициализация дерева с корнем root. В результате имеем дерево с одной вершиной и значение в этой вершине равно value
 * \param root корень дерева которое будет инициализировано
 * \param data значение которое будет в единственной вершине этого дерева
 */
void initialization(struct avl_tree *root, int data);

/**
 * \brief Очистка памяти
 * \param root корень дерева которое необходимо стереть из памяти
 */
void del_tree(struct avl_tree *root);

#endif
